from fastapi import FastAPI, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from database import database, users, metadata
import sqlalchemy
import random
import requests
from datetime import datetime
from sqlalchemy import text

app = FastAPI()

# PostgreSQL Engine
engine = sqlalchemy.create_engine(str(database.url))
metadata.create_all(engine)
templates = Jinja2Templates(directory="templates")

# Textbelt API
SMS_API_KEY = "58ed0414c9e959d68d66c2b55e0a4c576e2a4c52BgRzbptGWysU5P2wvItnvUbHD"

# –ö–æ–¥—Ç–∞—Ä–¥—ã —É–∞“õ—ã—Ç—à–∞ —Å–∞“õ—Ç–∞—É
sms_codes = {}

# –¢–µ–ª–µ—Ñ–æ–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É
def clean_phone(phone: str) -> str:
    return phone.replace("+7", "7").replace("(", "").replace(")", "").replace(" ", "").replace("-", "")

# –ë–∞–∑–∞“ì–∞ “õ–æ—Å—ã–ª—É
@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

# –ë–∞—Å—Ç—ã –±–µ—Ç
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# –¢—ñ—Ä–∫–µ–ª—É –±–µ—Ç—ñ
@app.get("/register", response_class=HTMLResponse)
async def register_form(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

# –ü–∞—Ä–æ–ª—å–¥—ã –∂–∞–Ω–∞—Ä—Ç—É –±–µ—Ç—ñ	
@app.get("/forgot_password", response_class=HTMLResponse)
async def forgot_password(request: Request):
    return templates.TemplateResponse("forgot_password.html", {"request": request})

# ‚úÖ –°–ú–° –∫–æ–¥ –∂—ñ–±–µ—Ä—É –∂”ô–Ω–µ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –Ω”©–º—ñ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
@app.post("/send_code")
async def send_code(
    phone: str = Form(...),
    mode: str = Form("default")
):
    cleaned = clean_phone(phone)  # ‚úÖ << “ö–û–°–£ –ö–ï–†–ï–ö

    if mode == "register":
        query = users.select().where(users.c.phone == phone)
        user_exists = await database.fetch_one(query)
        if user_exists:
            return JSONResponse({
                "ok": False,
                "msg": "–ë“±–ª –Ω”©–º—ñ—Ä —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω",
                "exists": True
            })

    # ‚úÖ –ö–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É
    code = str(random.randint(100000, 999999))
    sms_codes[cleaned] = code
    print(f"[SMS] –ö–æ–¥ {code} –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {cleaned}")

    # Textbelt –∞—Ä“õ—ã–ª—ã –°–ú–° –∂—ñ–±–µ—Ä—É
    payload = {
        "phone": cleaned,
        "message": f"–ö—ñ—Ä—É –∫–æ–¥—ã: {code}",
        "key": SMS_API_KEY
    }

    response = requests.post("https://textbelt.com/text", data=payload)

    try:
        data = response.json()
    except Exception as e:
        return JSONResponse({"ok": False, "msg": f"JSON “õ–∞—Ç–µ—Å—ñ: {str(e)}", "raw": response.text}, status_code=500)

    if data.get("success"):
        return JSONResponse({"ok": True, "msg": "–ö–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ ‚úÖ"})
    else:
        return JSONResponse({"ok": False, "msg": "“ö–∞—Ç–µ: –∫–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ ‚ùå", "data": data}, status_code=500)

# ‚úÖ –°–ú–° –∫–æ–¥—Ç—ã —Ç–µ–∫—Å–µ—Ä—É
@app.post("/verify_code")
async def verify_code(phone: str = Form(...), code: str = Form(...)):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    print(f"[VERIFY] –ö“Ø—Ç—ñ–ª–≥–µ–Ω –∫–æ–¥: {expected_code}, –∫–µ–ª–≥–µ–Ω –∫–æ–¥: {code}")

    if expected_code == code:
        return JSONResponse({"success": True})
    return JSONResponse({"success": False})

@app.post("/reset_password")
async def reset_password(
    phone: str = Form(...),
    password: str = Form(...)
):
    cleaned = clean_phone(phone)

    # üîí –ï–≥–µ—Ä –±“±–ª —Ç–µ–ª–µ—Ñ–æ–Ω–º–µ–Ω SMS –∫–æ–¥ –∞–ª—ã–Ω–±–∞“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äì “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫
    if cleaned not in sms_codes:
        return JSONResponse({"ok": False, "msg": "–ö–æ–¥ —Ç–µ–∫—Å–µ—Ä—ñ–ª–º–µ–≥–µ–Ω –Ω–µ–º–µ—Å–µ —É–∞“õ—ã—Ç—ã ”©—Ç—Ç—ñ"}, status_code=400)

    # ‚úÖ “ö“±–ø–∏—è—Å”©–∑–¥—ñ –∂–∞“£–∞—Ä—Ç—É
    query = users.update().where(users.c.phone == phone).values(password=password)
    await database.execute(query)

    print(f"üîê “ö“±–ø–∏—è—Å”©–∑ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã: {phone}")
    return JSONResponse({"ok": True, "msg": "“ö“±–ø–∏—è—Å”©–∑ —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã ‚úÖ"})


# ‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ—É
@app.post("/register_user")
async def register_user(
    first_name: str = Form(...),
    last_name: str = Form(...),
    phone: str = Form(...),
    password: str = Form(...),
    sms_code: str = Form(...)
):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    if not expected_code or sms_code != expected_code:
        return JSONResponse({"ok": False, "msg": "‚ùå –ö–æ–¥ –¥“±—Ä—ã—Å –µ–º–µ—Å"}, status_code=400)

    query = users.insert().values(
        first_name=first_name,
        last_name=last_name,
        phone=phone,
        password=password,
        created_at=datetime.utcnow()
    )
    await database.execute(query)
    print("‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ:", phone)
    return JSONResponse({"ok": True, "msg": "‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ!"})

# üîí “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ (–∞–¥–º–∏–Ω–≥–µ)
@app.get("/users{admin_code}", response_class=HTMLResponse)
async def view_all_users(request: Request, admin_code: str):
    if admin_code != "190340006343":
        return templates.TemplateResponse("user_not_found.html", {
            "request": request,
            "phone": admin_code
        })

    query = users.select().order_by(users.c.created_at.desc())
    user_list = await database.fetch_all(query)

    return templates.TemplateResponse("user_list.html", {
        "request": request,
        "users": user_list
    })

# ‚úÖ created_at –±–∞“ì–∞–Ω—ã–Ω “õ–æ—Å—É (–±—ñ—Ä —Ä–µ—Ç—Ç—ñ–∫)
@app.get("/add-created-at")
async def add_created_at_column():
    try:
        await database.execute(text(
            "ALTER TABLE users ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        ))
        return {"ok": True, "msg": "‚úÖ created_at –±–∞“ì–∞–Ω—ã “õ–æ—Å—ã–ª–¥—ã"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

# ‚úÖ Debug: JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä
@app.get("/debug-users")
async def debug_users():
    query = users.select().order_by(users.c.created_at.desc())
    result = await database.fetch_all(query)
    return [dict(u) for u in result]
