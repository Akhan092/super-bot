from fastapi import FastAPI, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from database import database, users, metadata
import sqlalchemy
import random
import requests

app = FastAPI()

# PostgreSQL –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –±–∞—Å—Ç–∞—É
engine = sqlalchemy.create_engine(str(database.url))
metadata.create_all(engine)
templates = Jinja2Templates(directory="templates")

# üîê smsc.kz –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ
SMS_LOGIN = "Ahan1992"
SMS_PASSWORD = "Ahan5250!"

# üì¶ –£–∞“õ—ã—Ç—à–∞ SMS –∫–æ–¥—Ç–∞—Ä (Redis –æ—Ä–Ω—ã–Ω–∞)
sms_codes = {}

# ‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É—à—ã
def clean_phone(phone: str) -> str:
    phone = phone.replace("+7", "7")
    return phone.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")

# üîå –ë–∞–∑–∞ “õ–æ—Å—É/–∞–∂—ã—Ä–∞—Ç—É
@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

# üî∑ –ë–∞—Å—Ç—ã –±–µ—Ç
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üî∑ –¢—ñ—Ä–∫–µ–ª—É –±–µ—Ç—ñ
@app.get("/register", response_class=HTMLResponse)
async def register_form(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

# üî∑ –ö–æ–¥ –∂—ñ–±–µ—Ä—É
@app.post("/send_code")
async def send_code(phone: str = Form(...)):
    cleaned = clean_phone(phone)
    code = str(random.randint(100000, 999999))
    sms_codes[cleaned] = code

    print(f"[SMS] –ö–æ–¥ {code} –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {cleaned}")

    url = f"https://smsc.kz/sys/send.php?login={SMS_LOGIN}&psw={SMS_PASSWORD}&phones={cleaned}&mes=–ö–æ–¥:%20{code}&fmt=3"
    response = requests.get(url)

    if response.status_code == 200:
        return JSONResponse({"ok": True, "msg": "–ö–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ ‚úÖ"})
    else:
        return JSONResponse({"ok": False, "msg": "“ö–∞—Ç–µ: –∫–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ ‚ùå"}, status_code=500)

# üî∑ –ö–æ–¥—Ç—ã —Ç–µ–∫—Å–µ—Ä—É
@app.post("/verify_code")
async def verify_code(phone: str = Form(...), code: str = Form(...)):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    print(f"[VERIFY] –ö“Ø—Ç—ñ–ª–≥–µ–Ω –∫–æ–¥: {expected_code}, –∫–µ–ª–≥–µ–Ω –∫–æ–¥: {code}, –Ω–æ–º–µ—Ä: {cleaned}")

    if expected_code == code:
        return JSONResponse({"success": True})
    return JSONResponse({"success": False})

# üî∑ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ—É
@app.post("/register_user")
async def register_user(
    first_name: str = Form(...),
    last_name: str = Form(...),
    phone: str = Form(...),
    password: str = Form(...),
    sms_code: str = Form(...)
):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    print(f"[REGISTER] –ö“Ø—Ç—ñ–ª–≥–µ–Ω –∫–æ–¥: {expected_code}, –µ–Ω–≥—ñ–∑—ñ–ª–≥–µ–Ω –∫–æ–¥: {sms_code}, –Ω–æ–º–µ—Ä: {cleaned}")

    if not expected_code or sms_code != expected_code:
        return JSONResponse({"ok": False, "msg": "‚ùå –ö–æ–¥ –¥“±—Ä—ã—Å –µ–º–µ—Å"}, status_code=400)

    query = users.insert().values(
        first_name=first_name,
        last_name=last_name,
        phone=phone,
        password=password  # ‚ö†Ô∏è –∫–µ–π—ñ–Ω bcrypt “õ–æ–ª–¥–∞–Ω—É –∫–µ—Ä–µ–∫
    )
    await database.execute(query)
    return JSONResponse({"ok": True, "msg": "‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ!"})

# üîç “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ –∞—Ä“õ—ã–ª—ã –∫”©—Ä—É
@app.get("/users{phone}", response_class=HTMLResponse)
async def view_user_by_phone(request: Request, phone: str):
    cleaned = ''.join(filter(str.isdigit, phone))
    query = users.select().where(users.c.phone.contains(cleaned))
    user = await database.fetch_one(query)

    if not user:
        return templates.TemplateResponse("user_not_found.html", {
            "request": request,
            "phone": cleaned
        })

    return templates.TemplateResponse("user_view.html", {
        "request": request,
        "user": user
    })
