# üîù –§–∞–π–ª–¥—ã“£ –µ“£ –±–∞—Å—ã
from fastapi import FastAPI, Form, Request, Query
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy import text
from datetime import datetime, timedelta
import sqlalchemy
import random
import requests
import uuid
import os
import subprocess
import httpx

from database import database, users, metadata, kaspi_shops  # ‚úÖ –ë–Ü–† –ñ–û–õ“í–ê –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ“£—ñ–∑


app = FastAPI()

# PostgreSQL Engine
engine = sqlalchemy.create_engine(str(database.url))
metadata.create_all(engine)
templates = Jinja2Templates(directory="templates")

# Textbelt API
SMS_API_KEY = "58ed0414c9e959d68d66c2b55e0a4c576e2a4c52BgRzbptGWysU5P2wvItnvUbHD"

# –ö–æ–¥—Ç–∞—Ä–¥—ã —É–∞“õ—ã—Ç—à–∞ —Å–∞“õ—Ç–∞—É
sms_codes = {}

# –¢–µ–ª–µ—Ñ–æ–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É
def clean_phone(phone: str) -> str:
    return phone.replace("+7", "7").replace("(", "").replace(")", "").replace(" ", "").replace("-", "")

# –ë–∞–∑–∞“ì–∞ “õ–æ—Å—ã–ª—É
@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

# –ë–∞—Å—Ç—ã –±–µ—Ç
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# –¢—ñ—Ä–∫–µ–ª—É –±–µ—Ç—ñ
@app.get("/register", response_class=HTMLResponse)
async def register_form(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

# –ü–∞—Ä–æ–ª—å–¥—ã –∂–∞–Ω–∞—Ä—Ç—É –±–µ—Ç—ñ	
@app.get("/forgot_password", response_class=HTMLResponse)
async def forgot_password(request: Request):
    return templates.TemplateResponse("forgot_password.html", {"request": request})

# ‚úÖ –°–ú–° –∫–æ–¥ –∂—ñ–±–µ—Ä—É –∂”ô–Ω–µ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –Ω”©–º—ñ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
@app.post("/send_code")
async def send_code(
    phone: str = Form(...),
    mode: str = Form("default")
):
    cleaned = clean_phone(phone)  # ‚úÖ << “ö–û–°–£ –ö–ï–†–ï–ö

    if mode == "register":
        query = users.select().where(users.c.phone == phone)
        user_exists = await database.fetch_one(query)
        if user_exists:
            return JSONResponse({
                "ok": False,
                "msg": "–ë“±–ª –Ω”©–º—ñ—Ä —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω",
                "exists": True
            })

    # ‚úÖ –ö–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É
    code = str(random.randint(100000, 999999))
    sms_codes[cleaned] = code
    print(f"[SMS] –ö–æ–¥ {code} –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {cleaned}")

    # Textbelt –∞—Ä“õ—ã–ª—ã –°–ú–° –∂—ñ–±–µ—Ä—É
    payload = {
        "phone": cleaned,
        "message": f"–ö—ñ—Ä—É –∫–æ–¥—ã: {code}",
        "key": SMS_API_KEY
    }

    response = requests.post("https://textbelt.com/text", data=payload)
    try:
        print("üì§ Textbelt request payload:", payload)
        print("üì® Textbelt response (raw):", response.text)
        data = response.json()
        print("‚úÖ Textbelt response (parsed):", data)
    except Exception as e:
        print("‚ùå JSON parse error:", str(e))
        return JSONResponse({
            "ok": False,
            "msg": "–ñ–∞—É–∞–ø—Ç—ã —Ç–∞–ª–¥–∞—É “õ–∞—Ç–µ—Å—ñ",
            "error": str(e),
            "raw": response.text
        }, status_code=500)

    if data.get("success"):
        return JSONResponse({"ok": True, "msg": "–ö–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ ‚úÖ"})
    else:
        return JSONResponse({
            "ok": False,
            "msg": data.get("error", "“ö–∞—Ç–µ: –∫–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ ‚ùå"),
            "data": data
        }, status_code=500)
    try:
        data = response.json()
    except Exception as e:
        return JSONResponse({"ok": False, "msg": f"JSON “õ–∞—Ç–µ—Å—ñ: {str(e)}", "raw": response.text}, status_code=500)

    if data.get("success"):
        return JSONResponse({"ok": True, "msg": "–ö–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ ‚úÖ"})
    else:
        return JSONResponse({"ok": False, "msg": "“ö–∞—Ç–µ: –∫–æ–¥ –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ ‚ùå", "data": data}, status_code=500)

# ‚úÖ –°–ú–° –∫–æ–¥—Ç—ã —Ç–µ–∫—Å–µ—Ä—É
@app.post("/verify_code")
async def verify_code(phone: str = Form(...), code: str = Form(...)):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    print(f"[VERIFY] –ö“Ø—Ç—ñ–ª–≥–µ–Ω –∫–æ–¥: {expected_code}, –∫–µ–ª–≥–µ–Ω –∫–æ–¥: {code}")

    if expected_code == code:
        return JSONResponse({"success": True})
    return JSONResponse({"success": False})

@app.post("/reset_password")
async def reset_password(
    phone: str = Form(...),
    password: str = Form(...)
):
    cleaned = clean_phone(phone)

    # üîí –ï–≥–µ—Ä –±“±–ª —Ç–µ–ª–µ—Ñ–æ–Ω–º–µ–Ω SMS –∫–æ–¥ –∞–ª—ã–Ω–±–∞“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äì “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫
    if cleaned not in sms_codes:
        return JSONResponse({"ok": False, "msg": "–ö–æ–¥ —Ç–µ–∫—Å–µ—Ä—ñ–ª–º–µ–≥–µ–Ω –Ω–µ–º–µ—Å–µ —É–∞“õ—ã—Ç—ã ”©—Ç—Ç—ñ"}, status_code=400)

    # ‚úÖ “ö“±–ø–∏—è—Å”©–∑–¥—ñ –∂–∞“£–∞—Ä—Ç—É
    query = users.update().where(users.c.phone == phone).values(password=password)
    await database.execute(query)

    print(f"üîê “ö“±–ø–∏—è—Å”©–∑ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã: {phone}")
    return JSONResponse({"ok": True, "msg": "“ö“±–ø–∏—è—Å”©–∑ —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã ‚úÖ"})


# ‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ—É
@app.post("/register_user")
async def register_user(
    first_name: str = Form(...),
    last_name: str = Form(...),
    phone: str = Form(...),
    password: str = Form(...),
    sms_code: str = Form(...)
):
    cleaned = clean_phone(phone)
    expected_code = sms_codes.get(cleaned)

    if not expected_code or sms_code != expected_code:
        return JSONResponse({"ok": False, "msg": "‚ùå –ö–æ–¥ –¥“±—Ä—ã—Å –µ–º–µ—Å"}, status_code=400)

    query = users.insert().values(
        first_name=first_name,
        last_name=last_name,
        phone=phone,
        password=password,
        created_at=datetime.utcnow()
    )
    await database.execute(query)
    print("‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ:", phone)
    return JSONResponse({"ok": True, "msg": "‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ!"})

# üîí “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ (–∞–¥–º–∏–Ω–≥–µ)
@app.get("/users{admin_code}", response_class=HTMLResponse)
async def view_all_users(request: Request, admin_code: str):
    if admin_code != "190340006343":
        return templates.TemplateResponse("user_not_found.html", {
            "request": request,
            "phone": admin_code
        })

    # 1. –ë–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É
    query = users.select().order_by(users.c.created_at.desc())
    user_list = await database.fetch_all(query)

    enriched_users = []

    # 2. ”ò—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ç–∏–µ—Å—ñ–ª—ñ –º–∞–≥–∞–∑–∏–Ω–¥–µ—Ä–¥—ñ “õ–æ—Å—É
    for user in user_list:
        shop_query = kaspi_shops.select().where(kaspi_shops.c.user_id == user["id"])
        shops = await database.fetch_all(shop_query)

        enriched_users.append({
            "id": user["id"],
            "first_name": user["first_name"],
            "last_name": user["last_name"],
            "phone": user["phone"],
            "password": user["password"],
            "created_at": user["created_at"],
            "shops": [dict(s) for s in shops]
        })

    from datetime import timedelta  # “õ–æ—Å—ã–ª“ì–∞–Ω –±–æ–ª—É –∫–µ—Ä–µ–∫

    return templates.TemplateResponse("user_list.html", {
        "request": request,
        "users": enriched_users,
        "timedelta": timedelta  # –ú–Ü–ù–ï –û–°–´ –ñ–ï–†–Ü –ú–ê“¢–´–ó–î–´
    })


# ‚úÖ created_at –±–∞“ì–∞–Ω—ã–Ω “õ–æ—Å—É (–±—ñ—Ä —Ä–µ—Ç—Ç—ñ–∫)
@app.get("/add-created-at")
async def add_created_at_column():
    try:
        await database.execute(text(
            "ALTER TABLE users ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        ))
        return {"ok": True, "msg": "‚úÖ created_at –±–∞“ì–∞–Ω—ã “õ–æ—Å—ã–ª–¥—ã"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request, phone: str = ""):
    cleaned = clean_phone(phone)

    # 1. “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç–∞–±—É
    query = users.select().where(users.c.phone == phone)
    user = await database.fetch_one(query)

    if not user:
        query = users.select().where(users.c.phone == cleaned)
        user = await database.fetch_one(query)

    if not user:
        return templates.TemplateResponse("user_not_found.html", {
            "request": request,
            "phone": phone
        })

    user_id = user["id"]
    name = user["first_name"]

    # 2. –ú–∞–≥–∞–∑–∏–Ω–¥–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É
    shop_query = kaspi_shops.select().where(kaspi_shops.c.user_id == user_id).order_by(kaspi_shops.c.created_at.desc())
    shops = await database.fetch_all(shop_query)

    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "name": name,
        "shops": [dict(s) for s in shops]
    })

# ‚úÖ Debug: JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä
@app.get("/debug-users")
async def debug_users():
    query = users.select().order_by(users.c.created_at.desc())
    result = await database.fetch_all(query)
    return [dict(u) for u in result]
@app.post("/login_check")
async def login_check(phone: str = Form(...), password: str = Form(...)):
    cleaned = clean_phone(phone)

    # –ï“£ –±—ñ—Ä—ñ–Ω—à—ñ ‚Äî —ñ–∑–¥–µ—É–¥—ñ –Ω–æ–º–µ—Ä –±–æ–π—ã–Ω—à–∞
    query = users.select().where(users.c.phone == phone)
    user = await database.fetch_one(query)

    # –ï–≥–µ—Ä —Ç–∞–±—ã–ª–º–∞—Å–∞, —Ç–∞–∑–∞–ª–∞–Ω“ì–∞–Ω –Ω“±—Å“õ–∞–º–µ–Ω —ñ–∑–¥–µ–π–º—ñ–∑
    if not user:
        query = users.select().where((users.c.phone == cleaned) | (users.c.phone == phone))
        user = await database.fetch_one(query)

    # –ï–≥–µ—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –∂–æ“õ –±–æ–ª—Å–∞
    if not user:
        return JSONResponse({"ok": False, "msg": "‚ùå –ú“±–Ω–¥–∞–π –Ω”©–º—ñ—Ä —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω"}, status_code=400)

    # “ö“±–ø–∏—è—Å”©–∑ –¥“±—Ä—ã—Å –ø–∞
    if user["password"] != password:
        return JSONResponse({"ok": False, "msg": "‚ùå “ö“±–ø–∏—è—Å”©–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å"}, status_code=400)

    print(f"‚úÖ –ö—ñ—Ä—É —Å”ô—Ç—Ç—ñ: {phone}")
    return JSONResponse({"ok": True})

    query = users.select().order_by(users.c.created_at.desc())
    result = await database.fetch_all(query)
    return [dict(u) for u in result]

@app.post("/add_kaspi_shop")
async def add_kaspi_shop(
    login: str = Form(...),
    password: str = Form(...),
    phone: str = Form(...)
):
    try:
        print("üü¢ /add_kaspi_shop –±–∞—Å—Ç–∞–ª–¥—ã")
        print("üì• –ö–µ–ª–≥–µ–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä:", login, phone)

        # üîé “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —ñ–∑–¥–µ—É
        query = users.select().where(users.c.phone == phone)
        user = await database.fetch_one(query)

        if not user:
            print("‚ùå “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã")
            return JSONResponse({"ok": False, "msg": "“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã"}, status_code=400)

        user_id = user["id"]
        print("üë§ “ö–æ–ª–¥–∞–Ω—É—à—ã ID:", user_id)

        # üîÅ –ë“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–µ?
        check_query = kaspi_shops.select().where(kaspi_shops.c.login == login)
        exists = await database.fetch_one(check_query)
        if exists:
            print("‚ö†Ô∏è Kaspi –ª–æ–≥–∏–Ω –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω")
            return JSONResponse({"ok": False, "msg": "‚ùå –ë“±–ª Kaspi –ª–æ–≥–∏–Ω –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω"})

        # üåê –°—ã—Ä—Ç“õ—ã —Å–µ—Ä–≤–µ—Ä–≥–µ —Å“±—Ä–∞–Ω—ã—Å (Kaspi –±–æ—Ç“õ–∞)
        print("üåê Kaspi –±–æ—Ç“õ–∞ —Å“±—Ä–∞–Ω—ã—Å –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...")
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post("http://45.136.57.219:5000/check_kaspi", data={
                "login": login,
                "password": password
            })

        if response.status_code != 200:
            print("‚ùå Kaspi –±–æ—Ç –∂–∞—É–∞–ø –±–µ—Ä–º–µ–¥—ñ")
            return JSONResponse({"ok": False, "msg": "Kaspi —Å–µ—Ä–≤–µ—Ä—ñ –∂–∞—É–∞–ø “õ–∞—Ç–ø–∞–¥—ã"}, status_code=500)

        data = response.json()
        if not data.get("ok"):
            print("‚ùå Kaspi –±–æ—Ç “õ–∞—Ç–µ—Å—ñ:", data.get("msg"))
            return JSONResponse({"ok": False, "msg": data.get("msg", "Kaspi –∂–∞—É–∞–ø “õ–∞—Ç–µ—Å—ñ")}, status_code=400)

        shop_name = data["shop_name"]
        merchant_id = data["merchant_id"]  # –ï–≥–µ—Ä –∂–æ“õ –±–æ–ª—Å–∞, –±–æ—Å “õ—ã–ª–∞–¥—ã
        print("‚úÖ Kaspi –±–æ—Ç—Ç–∞–Ω –º–∞–≥–∞–∑–∏–Ω –∞—Ç–∞—É—ã –∞–ª—ã–Ω–¥—ã:", shop_name)
        
        now = datetime.utcnow()

        # –ë–∞–∑–∞“ì–∞ –∂–∞–∑—É
        query = kaspi_shops.insert().values(
            user_id=user_id,
            shop_name=shop_name,
            login=login,
            password=password,
            merchant_id=merchant_id,  # ‚úÖ –∂–∞“£–∞ –±–∞“ì–∞–Ω
            created_at=now
        )

        # üíæ –ë–∞–∑–∞“ì–∞ –∂–∞–∑—É
        await database.execute(query)
        
        # –ù–∞“õ—Ç—ã created_at –º”ô–Ω—ñ–Ω –±–∞–∑–∞ —ñ—à—ñ–Ω–µ–Ω –∞–ª–∞–º—ã–∑
        select_query = kaspi_shops.select().where(
            (kaspi_shops.c.user_id == user_id) &
            (kaspi_shops.c.login == login)
        ).order_by(kaspi_shops.c.created_at.desc())
        
        shop_row = await database.fetch_one(select_query)
        
        return JSONResponse({
            "ok": True,
            "name": shop_name,
            "login": login,
            "password": password,
            "merchant_id": merchant_id,
            "created_at": shop_row["created_at"].strftime("%Y-%m-%d %H:%M:%S"),
            "expires": (shop_row["created_at"] + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
        })

    except Exception as e:
        print("‚ùå /add_kaspi_shop —ñ—à—ñ–Ω–¥–µ “õ–∞—Ç–µ:", str(e))
        return JSONResponse({"ok": False, "msg": str(e)}, status_code=500)

@app.get("/get_kaspi_shops")
async def get_kaspi_shops(phone: str = Query(...)):
    # üîç “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä“õ—ã–ª—ã —Ç–∞–±—É
    query = users.select().where(users.c.phone == phone)
    user = await database.fetch_one(query)

    if not user:
        return JSONResponse({"ok": False, "msg": "“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã"}, status_code=400)

    user_id = user["id"]

    # üîÑ Kaspi –º–∞–≥–∞–∑–∏–Ω–¥–µ—Ä—ñ–Ω –æ—Å—ã “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ “õ–∞—Ä–∞–π –∂“Ø–∫—Ç–µ—É
    shop_query = kaspi_shops.select().where(kaspi_shops.c.user_id == user_id).order_by(kaspi_shops.c.created_at.desc())
    result = await database.fetch_all(shop_query)

    shops = []
    for row in result:
        shops.append({
            "id": row["id"],
            "name": row["shop_name"],
            "expires": (row["created_at"] + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
        })

    return shops

@app.post("/delete_kaspi_shop")
async def delete_kaspi_shop(name: str = Form(...), phone: str = Form(...)):
    query = users.select().where(users.c.phone == phone)
    user = await database.fetch_one(query)
    if not user:
        return JSONResponse({"ok": False, "msg": "“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã"}, status_code=400)

    delete_query = kaspi_shops.delete().where(
        (kaspi_shops.c.shop_name == name) & (kaspi_shops.c.user_id == user["id"])
    )
    await database.execute(delete_query)
    return {"ok": True}

@app.get("/add-merchant-id-column")
async def add_merchant_id_column():
    try:
        await database.execute(text(
            "ALTER TABLE kaspi_shops ADD COLUMN merchant_id TEXT"
        ))
        return {"ok": True, "msg": "‚úÖ merchant_id –±–∞“ì–∞–Ω—ã “õ–æ—Å—ã–ª–¥—ã"}
    except Exception as e:
        return {"ok": False, "error": str(e)}

@app.get("/add-merchant-id")
async def add_merchant_id_column():
    try:
        await database.execute(text(
            "ALTER TABLE kaspi_shops ADD COLUMN IF NOT EXISTS merchant_id VARCHAR"
        ))
        return {"ok": True, "msg": "‚úÖ merchant_id –±–∞“ì–∞–Ω—ã “õ–æ—Å—ã–ª–¥—ã"}
    except Exception as e:
        return {"ok": False, "error": str(e)}
